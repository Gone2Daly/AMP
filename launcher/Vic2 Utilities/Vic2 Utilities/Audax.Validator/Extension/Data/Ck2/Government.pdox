(Validator Government) = {
	Type = GroupValidator
	FriendlyName = "Government"
	
	Validator = {
		Type = Default
		(FileGroup "common\heir_text" "*.txt")
		ValidatorName = HeirTextFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\government_flavor" "*.txt")
		ValidatorName = GovernmentFlavorFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\council_positions" "*.txt")
		ValidatorName = CouncilPositionFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\council_voting" "*.txt")
		ValidatorName = CouncilVotingFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\governments" "*.txt")
		ValidatorName = GovernmentFile
	}
	
}

(Type GovernmentFile) = {
	Optional = { Left = "feudal_governments" Right = GovernmentList }
	Optional = { Left = "nomadic_governments" Right = GovernmentList }
	Optional = { Left = "republic_governments" Right = GovernmentList }
	Optional = { Left = "theocracy_governments" Right = GovernmentList }
	Optional = { Left = "tribal_governments" Right = GovernmentList }
}

(Type GovernmentList) = {
	(Ch N N) = {
		Left = { Type = String }
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_desc" Left IfNot = NoCheckKey)
		Right = GovernmentDef
	}
}

(Type.Enum HoldingType) = { Values = { CASTLE FORT TRIBAL TEMPLE NOMAD CITY FAMILY_PALACE TRADE_POST HOSPITAL } }

(Type GovernmentDef) = {
	Single = { Left = "preferred_holdings" Right = { (PdoList Y) = { Type = HoldingType } } }
	Single = { Left = "allowed_holdings" Right = { (PdoList Y) = { Type = HoldingType } } }
	Optional = { Left = "allowed_holdings_culture" Right = { (PdoList Y) = { Type = HoldingType } } }
	Optional = { Left = "allowed_holdings_religion" Right = { (PdoList Y) = { Type = HoldingType } } }
	Optional = { Left = "allowed_holdings_culture_and_religion" Right = { (PdoList Y) = { Type = HoldingType } } }
	Optional = { Left = "builds_with_prestige" Right = { (PdoList Y) = { Type = HoldingType } } }
	
	Optional = { Left = "free_revoke_on_governments" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "free_revoke_on_governments_culture" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "free_revoke_on_governments_religion" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "free_revoke_on_governments_culture_and_religion" Right = { (PdoList Y) = { Type = Government } } }
	
	Optional = { Left = "ignore_in_vassal_limit_calculation" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "no_vassal_tax" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "vassal_call_to_arms" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "forced_contract" Right = { (PdoList Y) = { Type = Government } } }
	
	Optional = { Left = "free_revoke_on_tiers" Right = { (PdoList Y) = { Type = Tier } } }
	
	Optional = { Left = "title_prefix" Right = String }
	Optional = { Left = "frame_suffix" Right = String }
	
		Optional = { Left = "unit_home_modifier" Right = {
			Inherits = Modifier
		} }
	
	Single = { Left = "color" Right = { Color FloatColor } }
	Optional = { Left = "can_build_tribal" Right = Bool }
	Optional = { Left = "can_build_holdings" Right = Bool }
	Optional = { Left = "can_build_forts" Right = Bool }
	Optional = { Left = "can_build_temple" Right = Bool }
	Optional = { Left = "free_retract_vassalage" Right = Bool }
	Optional = { Left = "allows_matrilineal_marriage" Right = Bool }
	Optional = { Left = "have_gender_laws" Right = Bool }
	Optional = { Left = "barons_need_dynasty" Right = Bool }
	Optional = { Left = "dukes_called_kings" Right = Bool }
	Optional = { Left = "uses_piety_for_law_change" Right = Bool }
	Optional = { Left = "uses_decadence" Right = Bool }
	Optional = { Left = "can_build_city" Right = Bool }
	Optional = { Left = "can_build_temple" Right = Bool }
	Optional = { Left = "can_build_castle" Right = Bool }
	Optional = { Left = "can_build_tribal" Right = Bool }
	Optional = { Left = "can_change_to_nomad_on_start" Right = Bool }
	Optional = { Left = "allow_looting" Right = Bool }
	Optional = { Left = "allow_title_revokation" Right = Bool }
	Optional = { Left = "uses_prestige_for_law_change" Right = Bool }
	Optional = { Left = "ignores_de_jure_laws" Right = Bool }
	Optional = { Left = "can_create_kingdoms" Right = Bool }
	Optional = { Left = "can_be_granted_kingdoms_and_empires_by_other_government" Right = Bool }
	Optional = { Left = "can_imprison_without_reason" Right = Bool }
	Optional = { Left = "can_revoke_without_reason" Right = Bool }
	Optional = { Left = "can_usurp_kingdoms_and_empires" Right = Bool }
	Optional = { Left = "merchant_republic" Right = Bool }
	Optional = { Left = "can_grant_kingdoms_and_empires_to_other_government" Right = Bool }
	Optional = { Left = "free_levies_in_offensive_war" Right = Bool }
	Optional = { Left = "can_build_hospitals" Right = Bool }
	
	Optional = { Left = "accepts_liege_governments" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "accepts_liege_governments_culture" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "accepts_liege_governments_religion" Right = { (PdoList Y) = { Type = Government } } }
	Optional = { Left = "accepts_liege_governments_culture_and_religion" Right = { (PdoList Y) = { Type = Government } } }
	
	Optional = { Left = "demesne_size" Right = NnInt }
	Optional = { Left = "max_consorts" Right = NnInt }
	Optional = { Left = "vassal_limit" Right = Int }
	Optional = { Left = "commander_limit" Right = Int }
	Optional = { Left = "capital_move_delay" Right = NnInt }
	Single = { Left = "potential" Right = CharTrigger }
	Optional = { Left = "character_modifier" Right = CharModifier }
}

(Type CouncilPositionFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = CouncilPositionDef
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_desc" Left IfNot = NoCheckKey)
		UniqueId = Left
	}
}

(Type CouncilPositionDef) = {
	Single = { Left = "icon" Right = { IconRef = GFX_council_postions_sprite } }
	
	Optional = { Left = "may_request_law_change" Right = Bool }
	Single = { Left = "potential" Right = CharTrigger }
	Single = { Left = "voting_patterns" Right = { (PdoList Y) = { Type = CouncilVotingPattern } } }
	Single = { Left = "default_selection" Right = {
		Single = { Left = "value" Right = Double }
	} }
	Single = { Left = "selection" Right = {
		Single = { Left = "value" Right = Double }
		(Ch N Y) = { Left = "additive_modifier" Right = {
			Single = { Left = "value" Right = Double }
			Inherits = CharTrigger
		} }
		(Ch N Y) = { Left = "additive_opinion_modifier" Right = {
			Single = { Left = "who" Right = { Liege } }
			Single = { Left = "factor" Right = Double }
			Inherits = CharTrigger
		} }
		(Ch N Y) = { Left = "additive_compared_realm_size_modifier" Right = {
			Single = { Left = "who" Right = { Liege } }
			Single = { Left = "factor" Right = Double }
			Inherits = CharTrigger
		} }
		(Ch N Y) = { Left = "additive_power_diff_modifier" Right = {
			Single = { Left = "who" Right = { Liege } }
			Single = { Left = "factor" Right = Double }
			Inherits = CharTrigger
		} }
		(Ch N Y) = { Left = "additive_realm_size_modifier" Right = {
			Single = { Left = "balance" Right = Double }
			Single = { Left = "factor" Right = Double }
			Inherits = CharTrigger
		} }
	} }
	Optional = { Left = "war_target" Right = CouncilPositionWarTarget }
}

(Type CouncilPositionWarTarget) = { ContextValidator = CouncilPositionWarTarget }

(ContextValidator CouncilPositionWarTarget) = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = Char
}


(Type CouncilVotingFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = CouncilVotingDef
		UniqueId = Left
	}
}

(Type CouncilVotingDef) = {
	Single = { Left = "icon" Right = { IconRef = GFX_voting_reason_sprite } }
	Single = { Left = "pattern_type" Right = { Literal = "for" Literal = "against" } }
	
	Optional = { Left = "declare_war_interaction" Right = CouncilVotingWarDeclarationTrigger }
	Optional = { Left = "grant_landed_title_interaction" Right = GrantLandedTitleInteractionTrigger }
	(Ch Y N) = { Left = { Type = CouncilVotingTopic Type = Law } Right = CouncilVotingTrigger }
	(Ch Y N) = { Left = { Type = TargettedDecision } Right = CouncilTargetedDecisionVotingTrigger }
}

(Type CouncilVotingTrigger) = { ContextValidator = CouncilVotingTrigger }
(ContextValidator CouncilVotingTrigger) = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = Char
}

(Type CouncilTargetedDecisionVotingTrigger) = { ContextValidator = CouncilTargetedDecisionVotingTrigger }
(ContextValidator CouncilTargetedDecisionVotingTrigger) = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = Char
	FromFromFromTarget = Char
}

(Type CouncilVotingWarDeclarationTrigger) = { ContextValidator = CouncilVotingWarDeclarationTrigger }
(ContextValidator CouncilVotingWarDeclarationTrigger) = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = Char
	FromFromFromTarget = Char
	FromFromFromFromTarget = Title
}

(Type GrantLandedTitleInteractionTrigger) = { ContextValidator = GrantLandedTitleInteractionTrigger }
(ContextValidator GrantLandedTitleInteractionTrigger) = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = Char
	FromFromFromTarget = Title
	
	Set = {
		CharTrigger = GrantLandedTitleInteractionTrigger
	}
	
	Members = {
	}
}

(Type GovernmentFlavorFile) = {
	(Ch N N) = {
		Left = "government_flavor"
		Right = GovernmentFlavorDef
	}
}

(Type GovernmentFlavorDef) = {
	Single = { Left = "name" Right = Key UniqueId = Right }
	Single = { Left = "graphics" Right = String }
	Single = { Left = "priority" Right = Int }
	Single = { Left = "trigger" Right = CharTrigger }
}

(Type HeirTextFile) = {
	(Ch N N) = { Left = { Type = String } Right = HeirTextDef UniqueId = Left (CheckKey "*" Left IfNot = NoCheckKey) }
}

(Type HeirTextDef) = {
	Single = { Left = "weight_multiplier" Right = {
		Single = { Left = "factor" Right = Double }
		(Ch N Y) = { Left = "modifier" Right = {
			Single = { Left = "factor" Right = NnDbl }

			Inherits = FactorModifier
			Inherits = CharTrigger
		} }
	} }
}
