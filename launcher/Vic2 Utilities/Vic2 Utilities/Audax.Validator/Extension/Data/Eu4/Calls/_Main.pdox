# FromStatus[None | Country | Province]
# Call[FromStatus; Location pointer; int id]

Includes = {
	Control
	Misc
	Religion
	Scopes
	Status
	Territory
}

ContextValidatorInfo = {
	AllowThis = False # True by default
	AllowRoot = True # False by default; when enabled allows ROOT as a synonym for THIS
	AllowPrev = True # False by default; when enabled allows arbitrary chaining of PREV
	EnableNamespaces = True
	EnableEventTargets = True
	AllowScripted = True
	PossibleEventTargets = {
		(TargetGroup Country)
		(TargetGroup Country Province)
		(TargetGroup Province)
	}

	IdSearch = {
		(FileGroup "events" "*.txt") = {
			Province = "province_event\id"
			Country = "country_event\id"
		}
		
		EventTypes = { Country Province }
	}
	
	ParentNoPush = {
		"random_list"
		"trigger_switch"
	}
	
	CallSearch = {
		(FileGroup "events" "*.txt") = {
			Province = { SearchRoot = "province_event\option" Type = Event Id = "^\id\[R]" }
			Country = { SearchRoot = "country_event\option" Type = Event Id = "^\id\[R]" }
			Province = { SearchRoot = "province_event\immediate" Type = Event Id = "^\id\[R]" }
			Country = { SearchRoot = "country_event\immediate" Type = Event Id = "^\id\[R]" }
			
			SearchMethod = 2
		}
		
		(FileGroup "decisions" "*.txt") = {
			Country = "country_decisions\*\effect"
			Country = "religion_decisions\*\effect"
			
			SearchMethod = 2
		}
		
		(FileGroup "missions"  "*.txt") = {
			Country = "*\effect"
			Country = "*\immediate"
			Country = "*\abort_effect"
			
			SearchMethod = 2
		}
		
		(FileGroup "common\rebel_types" "*.txt") = {
			None = "*\siege_won_effect"
			None = "*\demands_accepted_effect"
			None = "*\demands_enforced_effect"
			
			SearchMethod = 2
		}
		
		(FileGroup "common\hre_reforms" "*.txt") = {
			None = "*\effect"
			None = "*\on_effect"
			None = "*\off_effect"
			
			SearchMethod = 2
		}
		
		(FileGroup "tutorial" "*.txt") = {
			None = "tutorial\page\effect"
			
			SearchMethod = 2
		}

		(FileGroup "common\on_actions" "*.txt") = {
			# IF YOU ADD ANYTHING, ADD IN THE NEXT SECTION TOO!!!

			Country = { SearchRoot = "on_bi_yearly_pulse\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_bi_yearly_pulse\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_battle_won_country\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_battle_won_country\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_battle_lost_country\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_battle_lost_country\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_diplomatic_annex\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_diplomatic_annex\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_war_lost\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_war_lost\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_war_won\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_war_won\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_enforce_rebel_demands\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_enforce_rebel_demands\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_integrate\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_integrate\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_annexed\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_annexed\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_colonial_reintegration\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_colonial_reintegration\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_hre_member_true_religion\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_hre_member_true_religion\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_hre_member_false_religion\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_hre_member_false_religion\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_replace_governor\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_replace_governor\events" Type = OnAction Id = "^\[L]" }			
			
			Country = { SearchRoot = "on_startup\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_startup\events" Type = OnAction Id = "^\[L]" }			
			

			Province = { SearchRoot = "on_siege_won_country\random_events" Type = OnAction Id = "^\[L]" }
			Province = { SearchRoot = "on_siege_won_country\events" Type = OnAction Id = "^\[L]" }
			
			Province = { SearchRoot = "on_siege_lost_country\random_events" Type = OnAction Id = "^\[L]" }
			Province = { SearchRoot = "on_siege_lost_country\events" Type = OnAction Id = "^\[L]" }
			




			Country = { SearchRoot = "on_battle_won_province\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_battle_won_province\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_added_to_trade_company\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_added_to_trade_company\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_removed_from_company\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_removed_from_company\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_company_formed\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_company_formed\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_company_disolved\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_company_disolved\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_battle_lost_province\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_battle_lost_province\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_siege_won_province\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_siege_won_province\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_siege_lost_province\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_siege_lost_province\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_abandon_colony\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_abandon_colony\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_explore_coast\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_explore_coast\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_conquistador_empty\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_conquistador_empty\events" Type = OnAction Id = "^\[L]" }
			
			Country = { SearchRoot = "on_conquistador_native\random_events" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_conquistador_native\events" Type = OnAction Id = "^\[L]" }
			
			
			
			None = "*\random_events"
			None = "*\events"
			
			SearchMethod = 3
		}
		
		(FileGroup "common\religions" "*.txt") = {
			None = { SearchRoot = "*\*\papacy\*\effect" Type = PapalDecision Id = "^\[L]" }
			
			SearchMethod = 2
		}
		
		(FileGroup "common\on_actions" "*.txt") = {
			Country = { SearchRoot = "on_bi_yearly_pulse" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_battle_won_country" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_battle_lost_country" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_diplomatic_annex" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_war_lost" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_war_won" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_enforce_rebel_demands" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_integrate" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_annexed" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_colonial_reintegration" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_hre_member_true_religion" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_hre_member_false_religion" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_replace_governor" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_startup" Type = OnAction Id = "^\[L]" }
			
			
			
			
			Province = { SearchRoot = "on_siege_won_country" Type = OnAction Id = "^\[L]" }
			Province = { SearchRoot = "on_siege_lost_country" Type = OnAction Id = "^\[L]" }




			Country = { SearchRoot = "on_battle_won_province" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_added_to_trade_company" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_removed_from_company" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_company_formed" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_company_disolved" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_battle_lost_province" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_siege_won_province" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_siege_lost_province" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_abandon_colony" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_explore_coast" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_conquistador_empty" Type = OnAction Id = "^\[L]" }
			Country = { SearchRoot = "on_conquistador_native" Type = OnAction Id = "^\[L]" }
			
			
			
			None = "*"
			
			SearchMethod = 2
		}
		
		(FileGroup "common\disasters" "*.txt") = {
			None = "*\on_monthly\events"
			None = "*\on_monthly\random_events"
			None = "*\on_start"
			None = "*\on_end"
			
			SearchMethod = 3
		}
		
		Search = {
			province_event
			country_event
		}
	}
}

(ContextValidator Country) = { }
(ContextValidator Province) = { }

(ContextValidator Trigger) = {
	#Abstract = True
	
	Set = {
		CountryTrigger = CountryTrigger
		ProvinceTrigger = ProvinceTrigger
		
		Country = Country
		Province = Province
	}
}

Global = {
(Type ProvinceTrigger) = {
	ContextValidator = ProvinceTrigger
}
}

(ContextValidator ProvinceTrigger) = {
	Inherits = Trigger
	
	ThisTarget = ProvinceTrigger
	Conditional = ProvinceTrigger
}

Global = {
(Type CountryTrigger) = {
	ContextValidator = CountryTrigger
}
}

(ContextValidator CountryTrigger) = {
	Inherits = Trigger
	ThisTarget = CountryTrigger
	Conditional = CountryTrigger
}

(ContextValidator Command) = {
	#Abstract = True
	
	Set = {
		CountryCommand = CountryCommand
		ProvinceCommand = ProvinceCommand
		CountryTrigger = CountryTrigger
		ProvinceTrigger = ProvinceTrigger
		
		Country = Country
		Province = Province
	}
}

Global = {
(Type ProvinceCommand) = {
	ContextValidator = ProvinceCommand
}
}

(ContextValidator ProvinceCommand) = {
	Inherits = Command
	
	ThisTarget = ProvinceCommand
}

Global = {
(Type CountryCommand) = {
	ContextValidator = CountryCommand
}
}

(ContextValidator CountryCommand) = {
	Inherits = Command
	ThisTarget = CountryCommand
}

Global = {
(Type.Enum Owner) = { Values = { "owner" } }
(Type.Enum Controller) = { Values = { "controller" } }
(Type.Enum Capital) = { Values = { ("capitol" If = Debug) "capital" } }
(Type.Enum Emperor) = { Values = { "emperor" } }
(Type.Enum Xxx) = { Values = { "xxx" "XXX" } }
(Type.Enum Heretic) = { Values = { "heretic" } }
(Type.Enum Random) = { Values = { "random" } }
(Type.Enum Yes) = { Values = { "yes" } }
(Type.Enum Secondary) = { Values = { "secondary" } }
(Type.Enum Enemy) = { Values = { "enemy" } }
}


		# ([Left Uniqueness] [Right Uniqueness])
		# N = never has to be unique
		# A = has to be unique only in an And clause
		# 		Only valid in conditionals
		#		Hence, can have duplicates in Or, Not clauses
		# Y = always has to be unique
		# Right can be left out only if left is Y - always must be unique
		# Hence, it is implied that Right is also Y.




























